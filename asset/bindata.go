// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// quindar-tone
package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataQuindarToneMp3 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9a\x79\x5c\x53\xd7\xb6\xc7\x57\x26\x08\x61\x30\x02\x02\x02\xd5\x18\x44\x11\x21\x03\x84\x90\x44\x22\x81\x24\x08\x42\x24\x0c\x75\xa8\xd6\x26\x24\x07\x48\x21\x83\x19\x18\xf4\xaa\xb1\xb6\x8a\x56\x5b\x40\xc5\x58\xd0\x82\x28\xe2\x40\x8b\x5a\x9f\xd3\x6d\x8d\x62\x1d\x0a\x58\x54\x54\x6c\xb5\xc5\xb6\x58\xb1\xad\xca\xd5\x56\xab\x96\xbc\x4f\x12\x50\x69\x7b\xfb\xec\xbb\xbe\x0f\xca\xe3\xf7\x4f\x3c\x39\x7b\xaf\xe5\x6f\x9f\x6f\xd6\x3a\xfb\x1c\x12\x04\xe1\x18\x00\x80\x09\x1e\xe2\xd4\x84\xa9\x00\xc3\x96\x01\x4c\x17\x89\x21\x2a\xba\x40\x23\x95\xe5\x20\x7a\x52\x06\x92\xa5\x50\x71\xc9\x37\x0f\x1e\x22\x93\x14\x72\x2e\x79\x5a\x84\x88\x26\xd2\xf0\x91\x6c\x45\xfc\x5c\x2d\x92\x36\x77\x4a\xba\x6c\x6e\x8e\x8c\x2d\x27\x47\x4f\x24\x44\x15\x70\x0a\x94\x1a\x25\xa2\x97\x92\x0a\x94\xb9\x2a\x1d\xa7\x80\x4b\x96\xca\xd5\x19\x08\x47\xa5\xe3\x58\xbf\xa6\x92\x49\xb6\x21\xfa\x1c\x2e\x39\xc6\x7a\x82\x34\x5d\x24\x26\xf1\xd5\x5a\x84\x14\x41\x09\x0f\x95\xd1\xe8\x74\x12\x93\x49\xa1\x33\x22\x98\x4c\x7a\x08\x29\x8c\x46\x0f\xa3\xd2\xc2\xa8\x34\x66\x28\x9d\xc1\x89\x60\x72\xc2\x22\x49\x3d\x22\x4f\x24\x90\xa2\xb4\xf2\x4c\x4e\xaa\x20\xae\x27\x99\x56\x9e\xc9\x25\x67\xeb\xf5\x1a\x0e\x95\x9a\x9f\x9f\x4f\xc9\x0f\xa7\xa8\xb5\x59\x54\x3a\x9b\xcd\xb6\x06\x09\x0b\x0b\xd5\xca\x33\x43\x75\x85\x2a\xbd\xb4\x20\x54\xa5\x0b\xb0\x86\xb0\xc7\x10\x20\x3a\x99\x56\xa1\xd1\x2b\xd4\x2a\x92\xf5\x58\x9a\xa1\x36\xe8\xb9\x64\x32\xc1\x9a\xa9\xc7\x89\x52\xf3\x28\xb8\x4a\x47\xb1\xb9\xa2\xc8\xd4\x4a\x6a\x81\x54\x43\xa5\x53\x68\xd4\xdf\x0d\x16\x89\xfe\x7a\xb8\x52\xd9\x67\x86\x4e\x2f\xcc\xd3\xff\xf5\x0c\x5d\x7a\xa1\x06\xa1\xa6\x22\x3a\xb5\x41\x2b\x43\x84\x79\x88\x4a\x1f\xd0\x37\x44\x2a\x92\xf9\x77\x42\xa4\x22\x99\x7d\x02\xc8\x65\x8f\x66\x6b\x0c\xda\x5c\xdb\xe2\xc9\x65\x54\x24\x17\x51\x22\x2a\xbd\x8e\x4a\xa7\xd0\x7f\xef\x52\xf0\xef\x5c\x2a\xed\x09\x05\x85\x2a\xa9\x52\x21\x13\x21\x72\x85\xd4\x3e\xb7\x40\xa9\xe1\x88\x10\xbd\x54\x2e\xd5\x4b\x05\x52\x3d\xc2\x25\x87\xd1\xe8\xe1\xa1\x34\x76\x68\x18\x2d\x9d\xce\xe6\x84\xb3\x38\x8c\x88\xf1\x34\x16\x87\x46\x7b\x3c\x5e\x2d\x57\x64\x16\x3e\xe5\x68\x91\x88\x93\xa0\xd2\xe9\xa5\x2a\x19\x92\x20\xe0\x92\x0b\x94\x1a\x8a\x42\x21\xe7\x08\x23\x19\x91\x7c\x66\x98\x50\xc8\x0e\xa3\x0b\xc3\xe9\xf4\x58\x76\x58\x04\x8b\xc9\xa7\x31\xe3\x62\xe2\x62\xf8\x8c\xb8\x27\xa6\x0b\xd4\x32\x83\xd5\x71\xef\x74\xf9\xdf\x9b\x9e\xac\x55\x64\x29\x54\xd2\xdc\x3f\x0b\x13\x16\x2b\x88\x89\x65\xb1\xf8\x7c\x96\x3d\x0c\x5b\x20\xe0\x0b\x05\x71\x34\x41\x78\x8c\x20\x2e\x86\x16\x6b\x0b\x23\x97\x71\x32\xd5\x5a\xa5\x54\xcf\x25\x4b\x0d\x72\x85\x9a\xaa\xd4\x20\x59\x36\x58\x49\x51\xf6\x14\xf1\x0a\x9d\x5e\xad\x2d\xb4\x7d\x65\x27\x38\x0d\x99\x63\x3f\xb2\x1f\xe6\x2a\xec\x07\x24\x1b\x57\x1c\xa9\xcc\x8a\x36\x97\xac\x93\xe6\x21\x72\x72\x9f\x53\x8a\x3f\x59\xab\xa7\xfa\x5f\x3e\x8a\x90\x9f\x8d\xa8\xfa\x5e\x97\x08\x0e\x83\xc1\x89\x60\x3d\x71\x5d\x1e\x0d\xd6\xa9\x33\xf5\xf9\x52\x2d\x12\x93\x85\xa8\xf4\xbd\x35\x20\xc6\x20\x57\xd8\x7e\x7b\xfc\x34\x26\x29\x68\x9a\x42\x25\x57\xe7\xeb\xc6\xf5\x9d\x28\xcb\x96\xaa\xb2\x10\x39\x97\x4c\x55\xf6\xd0\x43\xa6\x3e\x43\xc7\xfc\xe7\xd9\xf1\xb3\x74\x2a\x0c\x7f\x0a\x90\xff\xc2\xa9\xed\x37\x17\xce\x78\x81\xae\xad\x90\xf1\x3c\x3b\x7e\xa6\x4e\x23\x9e\x81\xd3\x3e\xf5\xb4\xdf\xae\xad\x4c\xad\xca\x43\xb4\xfa\xdf\xbb\xd6\x48\xb5\x52\x25\xa2\x47\xb4\x3a\x2e\x39\x53\xab\x56\x92\xec\x05\x52\x9d\x95\x35\x81\x24\x53\xcb\x11\x19\x77\xcc\x1c\x83\x5a\x3f\x21\x4f\xad\xcd\x50\xe8\xec\xff\x26\xe9\xd5\xa4\x27\xea\xe8\xb3\x5c\x6f\xe6\x73\xb1\xde\x03\x67\x3d\x9f\xa6\xc9\xf6\x1b\xbf\xbd\x4e\xa3\xa8\x4f\x36\xdc\x28\xea\x1f\x5b\x72\x4f\x97\x16\x20\x5a\x45\x1e\x22\x8f\xd3\xaa\x95\x04\x7b\xc0\x54\x24\xf3\x3f\x00\xc9\x3e\x5f\xfe\x67\x77\x27\x7f\x63\xbe\xfa\x3f\xb9\x3d\xa1\x3e\xf2\x27\x10\x71\xd2\xb5\x52\x59\x8e\xee\x89\x9b\x90\x58\x69\xd6\x9f\xc2\x60\x1f\xae\xb7\x0e\x9f\x22\x55\x22\x5c\x32\xdf\x80\x88\xd5\x0a\x95\x9e\x24\x92\x6a\x73\x10\xad\x8e\xfc\xc7\x81\xd6\x3b\x55\xdb\xc0\xbe\xe7\x32\xad\xbc\xa6\xda\xee\x04\x33\x19\x0c\x3a\x8d\xf6\x6f\xf8\xfb\x43\xca\x34\x43\x86\x2c\x57\xa1\xf9\x1f\x33\x26\xa8\x92\x0d\xfa\xa7\xcc\x69\x27\xa1\xd7\xb5\x8d\x84\x3e\xcb\x62\x3f\xff\xc4\xe6\xc2\xba\x67\xa1\xf6\x6c\x5a\x26\x12\xa2\xa8\x8f\xb6\x4b\x3d\x1e\xfe\x8f\x35\x98\x64\x30\xc9\x60\x92\xc1\x24\x83\x49\x06\x93\x0c\x26\x79\xae\x92\x10\x1e\x3f\x70\x45\x54\x72\x2e\x39\x9f\x1c\x3d\x11\x06\x35\xa8\x41\x0d\x6a\x50\x83\x1a\xd4\xff\x3f\x59\x1e\xd4\x4b\x00\x1c\xee\x66\x37\x77\x44\x93\xf0\x00\x4e\x9a\x4a\x40\xf9\x95\xbc\x9a\xd2\xd6\x6d\x24\x02\x04\x36\x00\x40\x61\xa9\x53\xc2\xb9\xe0\xfa\x3b\xde\x18\x62\x49\xd9\xbf\xf2\xaa\x93\xab\x3a\x0e\xcf\xa8\x61\x70\xe3\x4e\xbd\x3f\x16\x69\x9f\xb2\x2c\x67\x66\x86\x96\x25\xbd\x42\x4f\x66\x6f\x64\x62\xc5\x67\xfd\x8b\x0f\x7f\x8a\x65\xbc\xc7\x2c\x4e\xf4\xc0\x57\x07\x49\x68\x78\x56\x89\xf3\xd0\x8a\x88\xb7\xe2\x17\x5f\x57\x3b\xcf\x1f\xde\xb0\x3f\xa3\x7a\x7a\x92\xe1\x42\x40\x51\x74\x69\x73\x87\x0b\xe5\x97\x43\x93\x82\x56\x4c\xff\x70\x01\xe9\xd4\xe5\x07\x77\x4a\x4f\x4d\x3b\x14\xa4\xbd\xfc\xe0\xe7\x71\xec\xd9\x97\xaa\x1a\x97\xde\x6c\xdd\xb9\x72\x9e\x76\x69\xe8\xd7\x87\x52\x57\xf9\xce\xd3\xb9\xcd\x8a\x5e\xb0\x79\xe5\xd9\x2f\x6b\x2d\x0d\x77\xaf\x4f\xbf\xcc\x3d\xf0\xee\xc3\xe8\x4b\x34\xdb\xe7\xa1\x7d\xd2\x03\xf3\x0c\x01\xda\xee\x2b\x4b\x3a\x7f\x6a\x5d\xd9\xf8\x60\x69\x64\xb2\x3a\xe5\xc0\x82\x2b\xcd\x67\xbf\x6c\xfd\xe0\xfd\x7d\x3a\xfd\x2f\x3f\x27\xab\xf7\xe9\x38\xb6\x8f\x05\x86\xdb\xe7\xb8\x9f\xfc\x70\xfb\x73\x6e\xda\x55\x6c\xbb\x18\x03\x21\xb1\xa3\xc9\xd5\x2e\x29\x42\x74\x91\xc0\xf1\xb3\x55\xed\x3e\xdf\x7c\x14\x1f\xf7\xa3\xf6\xaa\x07\xb8\xfe\x97\xc7\x30\xb2\xef\x2a\xa9\x59\x36\x63\xee\x86\x31\xa5\x19\xfb\x36\x44\xcd\x2f\x67\xc7\x87\xd3\xc1\x41\x7a\xb6\x73\x6f\x9b\xb9\xcd\xf4\x0d\x86\x44\x3b\x4d\xcf\x0d\xa0\xb5\x8c\x66\x14\xb1\xf4\x0e\x8b\x83\xf0\x38\x56\xfd\x46\x89\x5f\x8b\x0f\x11\x53\xb6\x28\x6f\x8c\xdf\x4f\xd1\x31\xc1\x7b\x2d\x96\xce\xa2\x76\x7a\x44\xdb\x7d\xb6\x7e\xe8\xf8\xfc\xc0\xa9\x16\x8b\xe5\x8b\xa3\x31\x5f\xe6\x05\x14\x5f\xa2\x6b\xf7\x1a\x66\x1e\xb0\x58\x2c\x77\x0f\x37\x68\x46\x6c\x11\xb5\x18\x2b\x59\x18\x4a\xf7\xab\xbf\xe5\x5b\x2c\x16\x4b\x37\xfa\x8d\x6f\x88\x9e\xde\xfe\xcb\x12\x32\x47\xd5\xde\x38\x78\xdf\x62\xf9\xda\x62\x53\x0b\x3f\xe5\x62\x6d\x6b\x73\x76\x6b\xcd\x47\xaf\xa7\xbd\x12\x31\xf9\xdc\x17\x07\x17\x9a\x0f\xd7\xcb\x5d\xfc\xdc\x50\x2b\xde\x63\xca\x4f\xef\x26\x7d\x84\xdd\x09\x90\xb0\x11\x00\x0b\x70\xea\xc7\xbb\xfe\x00\x96\x5a\xf6\x68\x09\x17\x9b\xfd\x72\x39\x67\x7c\xa9\xdf\xa9\x63\x12\x70\x5d\xbf\x58\x5c\xda\x8e\xe3\xc5\x37\x08\x68\x2b\x66\xce\xa0\xb5\xec\x9b\xdc\x34\x71\xd1\x25\x16\x0c\x23\x61\xd1\x43\xd9\x57\x97\xee\xb2\x3c\x4b\x3d\xa8\x97\x08\x80\x50\x3f\x2c\x35\x7f\xa4\xd9\x46\x5c\x3b\xa0\x1c\x18\x69\x7c\xb3\xdf\x71\x00\x08\x34\x03\x60\x9f\x69\xbe\x7e\x17\x80\xcb\xc1\xe6\x42\x80\x87\x3f\xbd\x7e\x3e\x3f\x6a\xb4\xf1\x6a\xd7\x2f\x3b\x66\x17\xcd\xff\x4c\xdf\x28\x96\x10\x40\x0a\x73\x41\xcc\xe7\x56\x8e\x70\x81\x7c\xf4\x28\x57\x37\x63\xe9\x37\x6d\xf5\x07\x1b\x9b\x2e\xcf\x07\xd8\x50\xdd\x70\x60\xb6\x78\x8f\x68\x43\xf4\x0a\xdc\xdb\xcd\xfb\x29\x95\x44\x42\xf2\x76\x08\x02\x33\x78\x49\xdc\x87\x2c\xc1\x98\x97\x64\x50\xca\x1d\xca\x63\x40\xb2\x09\x64\x66\xca\x45\xff\x9d\x3c\xcf\x45\x7b\xfb\xdb\xef\x73\xa7\x07\xf5\x92\x2d\x30\xe4\x81\xe7\x69\xcd\xf8\x2e\xf3\x08\x70\xd2\x00\xa0\x1c\x5c\xd2\x26\x99\x9d\x07\x28\x71\x96\x76\x00\xd4\xba\xba\x4a\x18\x79\x66\x9b\xeb\xa2\x99\x6b\x5c\x00\x5f\xe9\x24\x3a\x59\x56\x48\x04\x13\xda\x48\x9e\x6e\x72\x2f\xbd\xb2\x9d\x87\x59\x82\x7a\xc5\x87\x51\xb4\x9f\x84\x4f\xd6\x5b\x7b\xc1\x29\x13\x0f\x20\xfa\xe1\x6f\x26\x59\x36\xb1\xc8\x5c\xe7\x62\x02\x9c\xb1\x96\x88\x89\x23\xc8\xf4\xb9\x95\x38\x94\x39\xee\xc3\x91\x09\xbb\x78\x2e\x7b\xfa\xdb\xdc\x0b\xa0\x5e\xe2\x52\x0b\x50\x5d\xe6\x40\x3b\x71\xb8\xa0\x94\xc4\x76\xc7\x81\x4a\x5c\x8f\xda\x01\xc0\xef\x67\x3c\x80\x63\xf7\x91\x06\x11\xab\x73\x8b\xbc\x89\x73\x97\x7a\x74\x61\xde\x0a\xd7\x98\xf6\xf3\x05\xe8\x13\xc6\xad\xcb\xf9\x6b\x1a\x61\x68\xb1\x95\x38\xb7\x0a\x80\x4b\x25\x53\x5a\x7e\x1a\x9a\x3f\x8d\x58\x0f\x3e\x78\x23\xde\x88\x4e\x42\x1f\xb9\xf3\x5e\x6e\xbc\x51\x59\x23\xa0\x94\x81\xf3\x90\xfe\xb6\xf4\x62\xc8\x4e\xdc\x43\xcf\x54\x0d\x74\x99\x03\x8c\x76\xe2\x66\xa5\x4c\x32\x0f\x70\xe2\x6c\x85\x6b\x05\x80\xe5\x48\x12\x73\x76\x60\xd9\xfa\xd5\x75\x86\xc5\xe1\x7c\x10\x3b\xbb\xc3\x59\xdc\xce\x0b\xb8\x69\xe6\x7a\xef\x89\xa9\x89\x9b\x8d\x0e\xf5\xd6\xa1\x9f\x17\x59\x6b\x5c\x37\x21\x7e\xd4\xcb\xb1\xed\x4e\xe3\xf2\x67\xa4\x6a\xde\xe2\xd1\xa6\x83\xcb\xb0\xc6\xa6\x36\x13\xee\x84\x51\xf9\x9d\xa9\x2a\xd8\x28\x5f\xdc\xdf\xbe\x9e\x7f\xd9\x89\xbb\x6f\xaf\x71\x63\x7a\x6a\x1c\x31\x45\x68\xc6\x0c\x6c\xe2\x2c\x16\x33\x00\xfa\xa6\x0c\x20\x72\x4e\xf1\x96\xdd\xbb\x6e\xd4\x86\x95\x99\x70\x46\xa2\x11\x9d\xe4\x9c\xec\x7f\xa1\x08\x73\xd8\xbc\xd2\x65\x72\x70\xa9\x31\xdd\x68\x83\x73\x25\x80\xe5\xbb\x35\x85\x7e\x4e\xce\xc6\xd1\x9c\xf3\x53\x87\x93\x62\xdb\x83\x5c\x60\xb7\x43\xda\xc9\x11\xe5\xa9\x46\xef\xaa\xd5\x49\xa5\x46\xd9\xc5\xfe\xf6\xf4\x22\xa8\xb7\xab\xa6\xdc\x42\x75\x99\x03\x7a\x88\xcb\x4e\xe1\x0f\xf0\x1a\x67\xed\xa9\xde\x75\x00\x23\x2d\x21\x1b\x13\x05\xc1\x30\x74\x6d\x60\x5d\x70\x1a\x88\xdd\x3c\xc1\x03\xb5\xfa\x35\x86\x1e\x45\x13\xe3\x66\xd4\x4d\x8e\x45\x25\x4b\xac\xc4\x7d\xbc\x0e\xc0\xd2\x72\x82\xb9\xd1\x59\x1e\x0c\x8d\x7b\x1c\x13\x37\xf9\xa0\x2a\x2b\x47\x28\xc6\x38\x28\x36\x66\x8f\x46\xbd\x7e\xa8\xf4\x7a\x2a\x91\x28\xab\xe8\x6f\x5f\x2f\x80\x7a\xbb\x6a\x8b\x95\xb8\xc0\x9e\xae\xea\x93\x16\x33\xc0\x89\xeb\xe9\xab\x3b\x0a\x01\x2c\xf7\x2f\x63\xe6\xc4\x84\xdf\x3f\x35\x75\xb8\x07\x8f\xe4\x59\x5f\x83\xcb\xb9\x91\xcd\xc0\xd4\x12\x8a\xbe\x58\xfe\x8e\xf1\x8d\x8f\x34\x00\xb0\xed\x9f\x2f\x03\x3c\x90\xbf\x9b\xee\xd4\xaa\xc8\xce\x2c\x3a\x97\x29\xdb\xbc\x8a\x00\x25\xe0\x66\x8a\xd8\x71\x72\x2d\xcf\x7f\xeb\xfc\xb9\x85\x92\x6b\x8e\x01\x8e\xd1\xfd\xed\xea\xf9\x57\x6f\x57\xfd\xfc\x16\xae\xcb\x3c\xd4\x5e\xe3\x1c\x3f\x4a\xe1\x9a\xa9\x03\x88\x38\x33\x40\xf0\x8d\x66\x80\xe8\x33\x13\xb0\x8b\x35\xb7\x26\xfb\xf1\xdb\xc2\xbe\xfc\x04\x0d\xce\x34\x34\x6a\x79\x5d\xab\x19\x8b\x6e\x04\x93\x2b\x48\x8d\xdb\x69\xdb\x24\x69\x74\x92\x2b\x0d\x8f\xae\x92\xe0\xc5\xc7\x2b\x34\xa8\xe2\xd1\x00\xb0\x6e\x7b\x04\xc0\x2f\x77\x42\xb0\x89\xd7\xcf\x78\xec\x30\x93\x50\x1d\x5c\x71\xeb\x22\x1a\x0e\x2a\xc1\xd1\xe4\xb0\x5b\xb1\xb6\x38\xc8\x68\x34\xb4\x97\x25\x0f\x83\xa0\x4a\xf4\x20\x76\x7f\xa5\x5e\xe2\x92\x35\xe8\xc7\x3b\x07\x49\xda\x84\x01\x5e\xe3\x1e\x02\x00\x3a\xf7\x28\x60\x2c\xbb\xd3\x5b\x7f\xf4\xdc\x9d\xbe\xcb\xb4\x0a\x45\x34\x4a\xae\xb9\x99\x88\x1f\x6c\x7d\x57\x1c\x5a\xbb\x69\x08\x77\xd8\x50\x23\x9d\x87\xd7\xd8\x8a\x21\x02\x60\xb9\x97\x73\xe2\x52\xe9\xd7\xfc\xba\x40\x9d\x3b\xb0\x46\xe3\xb0\xe0\xeb\x3d\xfb\xf6\x90\xf6\x91\x93\xc6\xaa\x1e\xae\x2b\x19\x66\x1c\xac\x70\x4f\xa3\xc7\x35\xce\xba\x73\xe8\x21\x0e\x9b\x16\x3d\x70\x9f\xc7\xf5\xca\x06\xdd\x4e\x4f\xc0\x58\xb6\x0a\x2e\x36\x37\x51\xcf\x99\x32\x5d\x64\xa3\x2b\x3d\x97\x06\x40\xe0\xdd\x40\xec\x9a\xdc\x85\x1d\x1a\x93\xff\x0e\x60\x59\x89\x2b\x17\x03\x58\x9a\x34\xa9\x92\xaf\x46\xf9\x23\x17\xd3\xaa\xc4\x4e\xa3\x80\x87\x47\x99\x30\x1f\x8e\x5b\xd6\x36\xaa\x6a\xf7\xde\x21\x27\x57\xef\xd8\x01\xec\xfe\x36\xf5\x02\xa8\x77\xe7\x70\xca\x4a\x1c\xb9\x87\xb8\x82\x34\xee\xc0\xae\x71\xdd\x00\x80\x62\x7e\x06\x28\xcb\xcf\x8d\x37\x8f\x6c\x5c\xfa\xda\xcb\x5e\xc3\x81\x26\xc1\x7a\x41\xab\xb9\x64\x4b\x93\x89\xf7\x69\xb0\xdf\x3f\x67\xbb\x0d\x07\xad\xd1\xc9\xba\xc9\xc0\x97\xf3\x00\x2c\x27\xda\x28\x27\x2f\xc4\x3a\x7f\x55\x9e\x89\xbf\xf1\x32\x54\x01\xd6\xe4\x16\x9a\xb0\x66\xdf\x4b\x1f\x74\xee\xff\x87\x58\x8e\x3e\xbd\xf4\xfd\xfe\xf6\xf5\x22\xa8\x0f\x71\xbd\x4f\x47\x3c\x53\xa2\x07\x36\x71\x96\x9e\xed\xaa\xc7\x72\x23\x8c\xb4\xcc\x10\x5c\xc8\x60\x5f\x7c\x67\x2f\xf6\x5d\x2c\x48\x66\x61\x9a\xd0\x6b\x18\xcd\xfe\x6e\x17\x6f\xdf\xf4\xdb\xf8\x12\xac\x51\x00\x80\xf3\xc7\x33\x00\x2c\xdb\xaa\x57\x8a\x1c\xea\xb1\x23\x3f\x9e\xea\x32\x33\xc3\xe8\x13\x8c\xa9\x21\x10\x7c\xb3\x4a\xd1\xc8\x0d\xd5\xad\x4b\xf5\x6f\x62\x2e\x0c\x3e\x03\x7e\x0a\xd9\x89\xfb\xd5\x53\x7c\x0b\xfd\xf8\x9d\x43\x54\x8a\x70\xc0\x13\x67\x04\x80\xd9\xc7\x8c\xb0\xf0\xd7\x90\x8e\x5c\x54\xdd\x57\x07\xf6\xa3\x2b\xd1\x2e\x50\x19\x44\x30\xb9\x8e\xfb\x75\xcb\x74\xaf\xca\xea\xb2\x9b\x67\x88\xc6\x9c\x14\x6b\x57\x6d\x9e\x0f\x60\x69\x39\xcd\x54\xee\x3e\xfa\xfd\x6e\xe5\xbd\x44\x1d\xf0\xd0\x34\x14\x4a\x87\xc1\x1e\x8a\x78\x15\xe5\x19\x35\xfd\xe6\xe5\x51\x78\xfc\xfe\x43\xfd\xed\xea\x05\xd0\xa3\xe7\x71\x7d\x76\x0e\x03\xfe\x9d\x83\xad\xad\xae\x7f\x05\x50\x96\x13\xb0\x69\xa1\x17\xf9\xc2\x02\xaf\x72\x1f\xb4\x31\x21\x37\x86\x14\x26\x11\xcc\x69\xdf\x86\xf1\x82\xb7\x22\xe7\x77\x3a\xf1\x26\xba\x03\xc0\xe5\x1b\x26\x1e\x40\xd4\xdd\x0a\x56\x83\x03\xce\x4c\x39\xf0\xb6\xcf\x10\x54\x8a\x11\xe0\xe4\xc8\x9d\x95\x28\x5a\x0a\xee\x36\x54\x92\x69\x61\x8e\xb2\x21\xd5\x7e\x4c\x47\x54\xbd\x18\x1b\x7a\xe7\xee\x7b\x21\x30\x6b\x69\x7f\xfb\x7c\x0e\xf5\xf8\x9d\x83\x63\x97\x79\x58\xcf\xd3\x11\x5a\x4a\x82\x39\x7a\x80\x11\x67\x06\x88\xfc\x64\x15\x0f\xa2\x2d\x94\xce\x55\x95\x1d\x71\xcb\xee\x25\xe0\x55\xaa\x7b\x24\x14\x16\xbc\x87\xb0\x12\x7c\x25\xbe\x2e\x12\x31\x96\x16\x89\xe2\x3b\x48\xaf\x30\xd6\xe1\x5a\x03\xb7\xef\xf9\xd7\x59\x42\xa5\x5f\x41\x51\x51\xd1\xb2\xb7\xdc\x67\xb7\xc2\x48\x72\x6c\xdc\xd1\x2d\x02\x4a\x52\xc3\xa6\xd3\x39\xcd\xdb\xb3\xde\x58\xff\x66\x47\xc8\xfd\xf1\x1f\xee\x19\x41\x8f\x61\x85\x4e\x88\xe5\x11\xce\xfb\x66\xde\x32\x0f\x1f\xdb\xed\xd3\x16\x6f\xca\x16\xbe\xbf\xdc\xbd\x0c\xd5\x8e\x1f\xf1\x21\xcf\x1c\xff\xa6\x77\x2e\x25\x2a\x72\x44\x7e\xc8\xe4\xcd\xf5\xdd\x2f\x1d\xd9\x50\x33\x41\xef\xe7\xb7\x70\x45\xab\xf0\xf8\x8d\xc8\x6f\xfd\x8f\x6c\x18\x35\x2d\x74\xda\x7b\x15\x8d\xfe\x9b\x8b\xfd\xce\xdf\x47\xfa\x7b\xb1\x9e\x4a\xdd\xe3\x2e\xa7\xac\x2b\x16\x1f\xca\x51\x8f\x75\x58\xd4\x1e\xdf\x58\x38\x61\x66\x34\xb1\xa1\x6e\xc3\xd1\x4a\x91\x23\xf6\xad\x45\x35\x1c\x37\x4a\x11\xe3\xd0\x75\x87\x9d\xed\x79\xe6\xee\x10\xc3\xd2\x05\x67\xa1\xe1\xe8\x62\x3b\x71\xf8\x63\x41\xe9\x85\xf7\xae\xcf\x02\x3b\x71\x63\x36\x57\xcf\xf8\xfe\xb6\x6b\x6d\x0f\x71\x91\xfe\x6e\x57\xfd\xc7\xe0\x7d\x82\x82\x24\xf5\x93\x3f\x3f\xe6\x92\xe3\x56\xdd\xb5\x92\x6d\x04\x07\x34\xca\xab\x6b\xc7\x22\xde\x55\x27\x74\xd5\x2c\x9f\xad\xc4\x7f\x7c\xc6\x70\x3c\x20\x6c\x05\xc0\xa2\x7f\xe4\x55\xf1\x86\xe3\x09\x01\xa6\xcd\x12\xb1\xe9\xd8\xab\x2c\xfc\xc1\x8e\x6f\x93\x0c\x8e\xf3\x8a\xcd\x66\x74\x4b\x98\xb0\x7d\xc6\x91\x96\xf1\x45\xd7\x5f\x5b\x3b\xdf\xb1\x2d\xca\x7d\xed\x35\x47\x21\xf3\xb7\x6c\xaf\xc3\xb8\x97\x12\x02\x82\xd2\x97\x97\x14\x4d\xd9\x5e\xa8\x3d\xfd\xdb\x4f\x88\xe2\x1d\xd3\x0f\x1f\xcc\x32\xbb\x0f\x8d\x19\x1e\x55\x98\x44\xc4\xd7\x94\x94\x4d\xdd\x7a\x9e\x73\xad\xec\x03\xfd\xf1\xe9\x37\x2f\xcd\xd1\x86\x08\x2f\x78\xeb\xdd\xbb\x62\x48\xf1\xe5\x33\x33\x72\x77\xf9\xef\xba\x52\xeb\x5b\x7e\xa2\x02\xd7\xb6\xf3\x52\x61\x4d\x7d\xfd\xdb\xee\x58\xfd\x85\xb9\xd7\x16\xd0\xe7\x5f\xfc\x72\xc2\x82\x1f\xa2\x97\xaf\x97\x1d\xbc\xd3\x54\xe5\xe1\x81\xc6\x49\x3b\x89\x3b\x47\x2e\xf7\x1a\xb1\xb5\xad\x62\xb6\xb8\xe1\xc2\x3c\x6a\xc9\x27\x2b\xe8\x79\x11\x27\x8f\x9f\x5e\x12\x84\xbe\x66\x4c\xfd\xcd\xf3\xe2\xfc\x2d\xae\x69\xef\x1b\xdf\x25\xd6\xae\x91\xf1\xc3\xdc\xd3\x94\x7b\x53\x62\x93\x62\x8a\x52\x59\xc5\x5b\xc4\xe7\x12\x73\x08\x7b\xf8\x82\xdb\x0f\x2d\x89\x35\xeb\x6b\xf4\x37\xb3\x5c\xf6\xac\xf9\xe2\xc6\xd9\x3a\xcf\xd1\x65\xfa\x10\xe9\xf7\x3b\x37\xb2\x4f\xdc\x73\x32\x0d\x97\x24\x4e\x5e\x4f\x6d\xc6\xbc\xf2\x6a\x53\xe7\xaf\xa5\xb4\x8e\xa4\xc6\x9a\x2f\x1a\x87\xe6\xec\xea\x38\xa9\x1c\x3b\x36\xf1\xed\x39\x2a\xd2\xf1\x24\xfe\xbd\xbd\xc4\x4d\xe3\x76\xbc\xb1\x6c\xeb\xb9\x3c\x8f\xd5\x15\x6b\xbd\xd1\x0f\xb9\xc2\x4f\x91\x24\x85\x77\xc0\x36\xc3\x38\x25\x7b\xf5\xb4\x29\x65\x67\x85\x9f\x26\x4d\x59\x39\xcc\xa5\x69\x12\x9d\x13\x56\xbd\xf6\xcc\x25\x43\x38\xb3\x62\xd3\x77\x9d\x73\x32\xd8\x22\x8f\xcd\x57\x9a\xa6\xbc\x53\xa3\x48\x3b\x56\x72\x8e\xb3\xba\x83\x91\x4e\xf7\x99\x92\x26\xfc\xb4\xe8\x2a\x67\x75\x4a\xd5\xd8\xe2\x0e\xcf\xce\xb3\x82\x4e\x64\x0d\x27\xbb\x36\x33\x83\xfd\xce\xe6\xf4\x65\xdf\xb1\x85\xbe\x04\x83\xab\xf8\x98\x94\x2d\xf2\xa8\x91\xdd\x5b\xec\x3d\xd6\x2b\xc0\x74\x26\x65\x52\x6a\x45\xcd\xdb\x0c\xc6\x75\xdf\x25\xbb\x4e\x6c\x60\x14\x9f\x9f\xfa\xad\x69\xfd\x28\x51\xd6\x38\x36\x7f\x4b\xb0\x6f\xc8\xdc\xb8\x67\x76\xc3\xd0\xf3\xce\x21\xfb\x5c\xe1\xaf\xf3\xb2\xa7\xd8\xbb\x2a\x00\x8a\x02\x00\xa4\x01\x55\xe3\xfe\xf7\xea\xb7\x3f\x97\x1d\x90\x4a\x8f\x99\xd4\xaf\xf9\xff\x3b\x00\x00\xff\xff\xd6\x2f\xcb\x16\x21\x4a\x00\x00")

func dataQuindarToneMp3Bytes() ([]byte, error) {
	return bindataRead(
		_dataQuindarToneMp3,
		"quindar-tone",
	)
}

func dataQuindarToneMp3() (*asset, error) {
	bytes, err := dataQuindarToneMp3Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "quindar-tone", size: 18977, mode: os.FileMode(420), modTime: time.Unix(1379677344, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"quindar-tone": dataQuindarToneMp3,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"quindar-tone.mp3": &bintree{dataQuindarToneMp3, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
